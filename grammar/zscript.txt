// ZScript Grammar in ANTLR format (Draft)

grammar ZScript;

// High-level structure of a ZScript program
program      : statement* EOF ;

// Statements
statement    : variableDecl
             | functionDecl
             | schemaDecl
             | importStmt
             | exportStmt
             | expression ';' ;

// Variable Declarations
variableDecl : ('var' | type) identifier ('=' expression)? ';' ;

// Function Declarations
functionDecl : ('fn' | 'func' | 'lambda') identifier '(' parameterList? ')' block ;

// Schema Declarations
schemaDecl   : 'schema' identifier '{' schemaField* '}' ;
schemaField  : ('var' | type) identifier ('=' expression)? ';' ;

// Import and Export Statements
importStmt   : 'import' stringLiteral ';' ;
exportStmt   : 'export' ('var' identifier | functionDecl | schemaDecl) ;

// Expressions
expression   : primaryExpr (operator primaryExpr)* ;
primaryExpr  : literal
             | identifier
             | '(' expression ')' ;

// Operators
operator     : '+' | '-' | '*' | '/' | '|>' | '??' ;

// Literals
literal      : number | stringLiteral | booleanLiteral | 'none' | 'null' ;
number       : DIGIT+ ;
stringLiteral : '"' (~["\r\n])* '"'
             | '\'\'' (~[\'\r\n])* '\'\''
             | '"""' .*? '"""' ;
booleanLiteral : 'true' | 'false' ;

// Types
type         : 'bool' | 'int' | 'float' | 'string' | 'array' | 'object' | 'char' ;

// Identifiers
identifier   : UTF8_CHAR (UTF8_CHAR | DIGIT | '_')* ;

// Parameters and Blocks
parameterList : parameter (',' parameter)* ;
parameter    : ('var' | type) identifier ;
block        : '{' statement* '}' ;

// Comments
COMMENT      : '//' ~[\r\n]* -> skip
             | '/*' .*? '*/' -> skip ;

// Helper rules
fragment DIGIT : [0-9] ;
fragment UTF8_CHAR : [a-zA-Z_] | '\u0080'-'\uFFFF' ;
